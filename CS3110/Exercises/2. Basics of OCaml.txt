### Exercise: values [★]
What is the type and value of each of the following OCaml expressions?
7 * (1 + 2 + 3)
  - 42, type int
"CS " ^ string_of_int 3110
  - "CS 3110", type string


### Exercise: operators [★★]
Write an expression that multiplies 42 by 10.
  - 42 * 10
Write an expression that divides 3.14 by 2.0. Hint: integer and floating-point 
operators are written differently in OCaml.
  - 3.14 /. 2.0
Write an expression that computes 4.2 raised to the seventh power. Note: there 
is no built-in integer exponentiation operator in OCaml (nor is there in C, by 
the way), in part because it is not an operation provided by most CPUs.
  - 4.2 ** 7.0
  - FOR INTEGERS:
    - let rec pow base exp = 
        match exp with
        | 0 -> 1
        | 1 -> base
        | _ -> base * pow base (exp - 1);;
  - TAIL RECURSIVE:
    - let pow base exp = 
        let rec aux acc base exp = 
          match exp with
          | 0 -> acc
          | _ -> aux (acc * base) base (exp - 1)
        in aux 1 base exp;;
  - OR: 
    - let pow base exp =
        let rec aux acc base exp = 
          if exp = 0 then acc
          else aux (acc * base) base (exp - 1)
        in aux 1 base exp;;


### Exercise: equality [★]
Write an expression that compares 42 to 42 using structural equality.
  - 42 = 42, bool = true
Write an expression that compares "hi" to "hi" using structural equality. What is the result?
  - "hi" = "hi", bool = true
Write an expression that compares "hi" to "hi" using physical equality. What is the result?
  - "hi" == "hi", bool = false


### Exercise: assert [★]
Enter assert true;; into utop and see what happens.
  - unit = ()
Enter assert false;; into utop and see what happens.
  - Exception: Assert_failure
Write an expression that asserts 2110 is not (structurally) equal to 3110.
  - assert 2110 <> 3110;;
  - assert (not (2110 = 3110));;


### Exercise: if [★]
Write an if expression that evaluates to 42 if 2 is greater than 1 and otherwise evaluates to 7.
  - let ans = if 2 > 1 then 42 else 7;;


### Exercise: double fun [★]
Using the increment function from above as a guide, define a function double that 
multiplies its input by 2. For example, double 7 would be 14. Test your function
by applying it to a few inputs. Turn those test cases into assertions.
  - let double input = input * 2;;


### Exercise: more fun [★★]
Define a function that computes the cube of a floating-point number. 
Test your function by applying it to a few inputs.
  - let cube x = x ** 3;;
Define a function that computes the sign (1, 0, or -1) of an integer. 
Use a nested if expression. Test your function by applying it to a few inputs.
  - let sign x =
      if x = 0 then 0
      else if x > 0 then 1
      else -1
Define a function that computes the area of a circle given its radius. 
Test your function with assert.
  - let area r = 
      Float.pi *. r ** 2.
For the latter, bear in mind that floating-point arithmetic is not exact. Instead of asserting an exact value, you 
should assert that the result is “close enough”, e.g., within 1e-5. If that’s 
unfamiliar to you, it would be worthwhile to read up on floating-point arithmetic.
  - let close_enough a b = 
      Float.abs(a -. b) < 1e-5
A function that take multiple inputs can be defined just by providing additional
 names for those inputs as part of the let definition. For example, the following
  function computes the average of three arguments:

let avg3 x y z = (x +. y +. z) /. 3.


### Exercise: RMS [★★]
Define a function that computes the root mean square of two numbers—i.e., sqrt[(x^2+y^2)/2]
. Test your function with assert.
  - let rms a b = sqrt ((a ** 2 +. b ** 2) /. 2.)


### Exercise: date fun [★★★]
Define a function that takes an integer d and string m as input and returns true
just when d and m form a valid date. Here, a valid date has a month that is one
of the following abbreviations: Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sept, 
Oct, Nov, Dec. And the day must be a number that is between 1 and the minimum 
number of days in that month, inclusive. For example, if the month is Jan, then 
the day is between 1 and 31, inclusive, whereas if the month is Feb, then the day is between 1 and 28, inclusive.

How terse (i.e., few and short lines of code) can you make your function? You 
can definitely do this in fewer than 12 lines.

- let validateDate (d: int) (m: string) =
    if m = "Jan" || m = "Mar" || m = "May" || m = "Jul" || m = "Aug" || m = "Oct" || m = "Dec"
    then d > 0 && d <= 31 else
    if m = "Apr" || m = "Jun" || m = "Sept" || m = "Nov"
    then d > 0 && d <= 30 else
    m = "Feb" && d > 0 && d <= 28;;


### Exercise: fib [★★]
Define a recursive function fib : int -> int, such that fib n is the nth number 
in the Fibonacci sequence, which is 1, 1, 2, 3, 5, 8, 13, … That is:
fib 1 = 1,
fib 2 = 1, and
fib n = fib (n-1) + fib (n-2) for any n > 2.
Test your function in the toplevel.
  - let rec fib (n : int) : int = 
      if n = 1 || n = 2 then 1 else
      fib (n - 1) + fib (n - 2)


### Exercise: fib fast [★★★]
How quickly does your implementation of fib compute the 50th Fibonacci number? 
If it computes nearly instantaneously, congratulations! But the recursive solution
most people come up with at first will seem to hang indefinitely. The problem is
that the obvious solution computes subproblems repeatedly. For example, computing
fib 5 requires computing both fib 3 and fib 4, and if those are computed separately,
a lot of work (an exponential amount, in fact) is being redone.

Create a function fib_fast that requires only a linear amount of work. 
Hint: write a recursive helper function h : int -> int -> int -> int, where h n pp p is defined as follows:

h 1 pp p = p, and
h n pp p = h (n-1) p (pp+p) for any n > 1.

The idea of h is that it assumes the previous two Fibonacci numbers were pp and p,
then computes forward n more numbers. Hence, fib n = h n 0 1 for any n > 0.
What is the first value of n for which fib_fast n is negative, indicating that integer overflow occurred?

- let fib_fast (n: int) : int = 
    let rec h (n: int) (pp: int) (p: int) = 
      match n with
      | 1 -> p
      | _ -> h (n-1) p (p+pp)
    in h n 0 1;;


### Exercise: poly types [★★★]
What is the type of each of the functions below? You can ask the toplevel to check your answers.

let f x = if x then x else x
  - f : bool -> bool = <fun>
let g x y = if y then x else x
  - g : 'a -> bool -> 'a = <fun>
let h x y z = if x then y else z
  - h : bool -> 'a -> 'a = <fun>
let i x y z = if x then y else y
  - i : bool -> 'a -> 'b = <fun>


### Exercise: divide [★★]
Write a function divide : numerator:float -> denominator:float -> float. 
Apply your function.
  - let divide (numerator: float) (denominator: float) : float = 

  - let divide ~numerator:x ~denominator:y = 
      x /. y


### Exercise: associativity [★★]
Suppose that we have defined let add x y = x + y. Which of the following produces an integer, which produces a function,
and which produces an error? Decide on an answer, then check your answer in the toplevel.
add 5 1
  - : int = 6
add 5
  - : int -> int = <fun>
(add 5) 1
  - : int = 6
add (5 1)
  - error (not a function; can't be applied)


### Exercise: average [★★]
Define an infix operator +/. to compute the average of two floating-point numbers. For example,
1.0 +/. 2.0 = 1.5
0. +/. 0. = 0.
  - let (+/.) (a: float) (b: float) = 
      (a +. b) /. 2.


### Exercise: hello world [★]
Type the following in utop:
print_endline "Hello world!";;
  Hello world!
  - : unit = ()
print_string "Hello world!";;
  - Hello world!- : unit = ()
Notice the difference in output from each.